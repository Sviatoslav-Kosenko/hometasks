package itmo.jjd.hw.task11;

public class Theory {
    public static void main(String[] args) {
        /**Что такое обертки над примитивами?*/
        //Обертка — это специальный класс, который хранит внутри себя значение примитива.
        //Но поскольку это именно класс, он может создавать свои экземпляры.
        // Они будут хранить внутри нужные значения примитивов, при этом будут являться настоящими объектами.
        //Названия классов-оберток очень похожи на названия соответствующих примитивов, или полностью с ними совпадают.
        // Поэтому запомнить их будет очень легко.
        /**int - Integer
         short - Short
         long - Long
         byte - Byte
         float - Float
         double - Double
         char - Character
         boolean - Boolean*/
        //Объекты классов оберток создаются так же, как и любые другие:
        //Integer i = new Integer(682);
        //Double d = new Double(2.33);
        //Boolean b = new Boolean(false);
        //Классы-обертки позволяют нивелировать недостатки, которые есть у примитивных типов.
        //Самый очевидный из них — примитивы не имеют методов.
        //Например, у них нет метода toString(), поэтому ты не сможешь, например, преобразовать число int в строку.
        //А вот с классом-оберткой Integer — запросто.
        //Integer i = new Integer(432);
        //String s = i.toString();
        //Возникнут сложности и с обратным преобразованием.
        //Допустим, у нас есть строка, про которую мы точно знаем, что она содержит число.
        //Тем не менее, в случае с примитивным типом int мы никак не сможем это число из строки достать и превратить, собственно, в число.
        //Но благодаря классам-оберткам такая возможность у нас появилась.
        //String s = "1166628"
        //Integer i = Integer.parseInt(s);
        //System.out.println(i);//116628
        /**
         * Что такое автоупаковка?
         * Что такое автораспаковка?
         */
        //Примитивы не являются объектами.
        //Но при этом переменной класса-обертки можно присваивать значение примитивного типа.
        // Этот процесс называется автоупаковкой (autoboxing).
        //Точно так же переменной примитивного типа можно присваивать объект класса-обертки.
        // Этот процесс называется автораспаковкой (autounboxing).
        /**Основные правила автоупаковки и автораспаковки? */
        //Это преобразование класса-обёртки в соответствующий ему примитивный тип. Е
        // сли при распаковке класс-обёртка был равен null, произойдет исключение java.lang.NullPointerException.
        //Unboxing происходит:
        //При присвоении экземпляра класса-обёртки переменной соответствующего примитивного типа.
        //В выражениях, в которых один или оба аргумента являются экземплярами классов-обёрток (кроме операции == и !=).
        //При передаче объекта класса-обёртки в метод, ожидающий соответствующий примитивный тип.
        //Автоупаковка и распаковка не работают для массивов!
    }
}